데이터 모델링이란?
정보 시스템을 구축하기 위한 데이터 관점의 업무 분석 기법
현실셰계의 데이터를 약속된 표기법으로 표현하는 과정
데이터 베이스를 구축하기 위한 분석 및 설계 과정

데이터 모델링의 유의점
* 중복
* 비유연성
* 비일관성

현실 세계를 일정한 형식에 맞추어 표현하는 추상화의 의미를 가질 수 있다.
복잡한 현실을 제한된 언어나 표기법으로 이해하기 쉽게 하는 단순화의 의미를 가지고 있다.
모호함을 배제하고 누구나 이해 가능하도록 정확하게 현상을 기술하는 정확하의 의미를 가진다.
업무 정보를 구성하는 기초가 되는 정보들을 일정한 표기법으로 표현한다.
분석된 모델로 데이터 베이스를 생성하여 개발 및 데이터 관리에 사용하기 위한 것이다.
데이터 모델링 자체로서 업무의 흐름을 설명하고 분석하는 부분에 의미를 가지고 있다.
분리 -> 비일관성과 관련이 있음

데이터 베이스의 스키마 구조 3단계
외부 스키마 -> 외부 관점
개념 스키마 -> 모든 관점
내부 스키마 -> 믈리적인 저장구조를 표현하는 스키마

ERD 작성순서
1. 엔터티를 그린다
2. 엔터디를 적절하게 배치란다
3. 엔터티간의 관계를 설정한다
4. 관계명을 기술한다.
5. 관계의 참여도를 기술한다.
6. 관계의 필수 여부를 기술한다.
엔터티 도출 -> 엔터티 배치 -> 관계 설정 -> 관계 기술 흐름

1976년 피터첸에 의해 만들어짐 : ERD
관계 명칭은 관계 표현에서 매우 중요한 부분
* 가장 중요한 엔터티는 왼쪽 상단 배치

엔터티는 인스턴스 속성이 2개이상

엔티티의 특징
반드시 해당 업무에서 필요하고 관리하고자 하는 정보여야 한다.
유일한 식별자에 의해 식별이 가능해야 한다.
영속적으로 존재하는 인스턴스의 집합이어야한다.(즉, 2개이상)
엔터티는 업무 프로세스에 의해 이용되어야 한다.
엔터티는 다른 엔터티와 최소한 한개 이상의 관계가 있어햐함

발생시점에 따른 엔터티 분류
* 기본 엔터티
* 관계 엔터디
* 행위 헨터티
* 중심 엔터티

엔터티 이름을 부여하는 방법으로 적절한것
현업업무에서 사용하는 업무
단수명사
모든엔터티에서 유일한 이름
생성되는 의미대로 자연스럽게 부여

인스턴스에서 관리하고자 하는 의미상 더 이상 분리 되지 않는 최소의 데이터 단위 *속성*
속성에 대한 설명
엔터티에 대한 자세하고 구체적인 정보를 나타낸다.
하나의 엔터티는 두개 이상의 속성을 가짐
속성도 집합이다.
한개의 엔터티는 두개 이상의 인스턴스 집합이어야 함
한개의 속성은 한개의 속성을 가진다

# 정규화
모델링된 데이터 베이스의 테이블과 관계들은 데이터를 입력, 수정, 삭제하는 과정에 있어서 일관성이 깨질 수 있는데 이를 anomaly라고 한다

정규화를 실행하면 일반적으로 데이터의 입력, 수정, 삭제 성능을 올라가지만 조회 성능은 대부분 많은 조인이 발생하면서 하락하게됨

정규화가 **항상** 성능을 떨어 트리는 것은 아님
정규화가  잘 되어 있지 않을시 불필요한 트랜잭션 발생등 전체적인 시스템 성능이 하락 할 수 있음

## 제 1정규형
모든 속성이 하나의 속성값만을 가지고 있으면서 유사한 속성이 반복되지 않는 상태를 제 1정규형이라고 함

- 하나의 속성이 여러 속성값을 가질 때나 하나의 테이블에 유사한 속성이 반복될때 이를 별도의 테이블로 나누기 때문에 테이블이 많아 짐
-릴레이션의 속성 값이 모두 원자값만으로 구성되어야 함
- 중복제거
- 기본키 설정
## 제 2정규형 
주식별자가 두개 이상으로 구성된 복합 식별자인 경우, 일반 속성이 주식별자의 일부에만 종속성을 가질 때가 있는데 이를 부분 종속 함수종속성이라고 한다.

- 2차 정규화는 부분 함수종속성을 제거한 상태
- 주식별자에 완전하게 종속적이지 않은 속성을 별도의 테이블로 분리
* 주식별자가 단일 식별자일 때는 2차 정규화가 필요 없으며 그 자체가 이미 제 2정규형
### 함수 종속성
함수 종속성이란 테이블의 속성이 함수의 대응 관계처럼 논리적 종속 관계를 가지는 성질을 말함
- 테이블의 모든 일반 속성은 주식별자에 완전하게 종속적이어야 하며 이를 완전 함수 종속성이라고 함
## 제 3정규형
주식별자가 아닌 일반 속성 간에 함수 종속성이 존재할 때 이를 이행 함수 종속성이라고 함

- 이행 함수 종속성이 제거된 상태가 제 3정규형
- 제 3정규형의 수행결과 분리된 엔터티들은 서로 비식별자 관계가 된다

# 관계와 조인의 이해
정규화를 통해 분해된 테이블 들은 조회과정에서 여러번의 조인이 발생할 수 있음.
※ 조인은 데이터베이스의 성능 측면에서 다소 부하가 높은 연산이므로 정규화를 통해 많은 테이블로 분해된 데이터 베이스는 전체적으로 조회 성능이 떨어질 수 있음
이러한 성능 저하를 막기 위해서는 조회 조건에 따라 새로운 관계를 정의하며 조인이 발생하는 빈도를 줄이는 것이 필요 이과정에서 다시 데이터의 중복이 증가할 수 있는데 데이터의 중복이 증가하면 데이터의 정합성이 깨질 가능성도 높아짐
- 데이터의 정합성과 조회성능간에는 트레이드 오프 관계가 성립한다고 볼 수 있음
- 데이터 베이스 모델러는 모델링을 하는 과정에서 시스템의 요구사항에 맞게 적절한 수준에서 정합성 수준을 결정해야함

# 조인(Join)
조인이란 두개의 테이블을 공통의 식별자를 통해 데이터를 조회할 수 있도록 하나의 테이블로 합치는 것이다

# Null 속성의 이해
- 데이터 베이스에서 Null이라는 것은 속성 값을 말할 떄 값이 아직 입력되지 않은 상태에 대한 특별한 표현
- 정의된 속성의 기본값으로 0이나 공백등 특별한 값이 정의 되지 않은 경우라면 모든 속성은  최초에 Null값을 가진다

# Null의 개념
- 속성에 대해 속성값을 말할 때 Null은 아직 입력된 값이 없는 상태로서 아무런 값도 가지고 있지 않은 상태를 의미하는 특별한 표현 
- NULL이라는 값을 가지고 있다는 것보다 아무런 값이 없다라는 의미
- "null"과 null은 다른 값이다
- Number 타입 속성의 경우에 값이 0인것과 null인 경우는 다르다
- 엔터도 값이 존재한다


# 관계형 데이터베이스
## 데이터베이스
- 데이터란 하나 하나의 단편적인 정보
- 데이터를 어떤 목적에 따라 가공하여 유용한 정보를 얻고자 하고, 이를 효율적으로 연구하여 그 결과물로 만들어진 것이 데이터 베이스
- 테이블이 저장되는 장소

## 데이터베이스 관리 시스템 (DBMS)
- 데이터를 구축하고 관리할 수 있는 기능을 제공하는 시스템 소프트웨어를 특히 DBMS라고 부름
- 단순한 어플리케이션이 아닌이상 현대의 거의 모든 애플리케이션은 데이터베이스를 사용하여 데이터를 저장하고 처리

## 관계형 데이터베이스
- 관계형 데이터베이스느 E.F.Codd박사가 발표한 정규화 이론에 따라 데이터 일관성 문제를 근본적으로 해결한 데이터베이스 시스템이 만들어 졌는데 이를 관계형 데이터 베이스라고 함
- 관계형 데이터베이스는 2차원 구조의 행과 열로 구성된 테이블 형태로 데이터 모델을 다루며 수학적 이론을 바탕으로 하고 있어 연산 자체를 수학적으로 최적화할 수 있다는 장점이 있음
- SQL이라는 공통 질의언어를 정의하여 데이터로부터 원하는 정보를 보다 쉽게 조회, 가공, 추출하는 것이 가능함
- Oracle, PostgresSQL, MariaDB, MySQL, SQL Server등 현재 우리 주변에서 많이 사용하고 있는 데이터베이스 시스템은 모두 관계형 데이터 베이스를 근간으로 하고 있다

## 테이블
- 관계형 데이터베이스에서 데이터 모델을 2차원 구조의 행과 열로 표현함,
이렇게 2차원 매트릭스 형태로 표현한 것을 테이블이라고 한다.
- 논리적 모델링: 엔터디, 물리적 모델링: 테이블, 관계형 데이터베이스: 릴레이션
- 테이블의 구성요소 칼럼헤더/스키마, 열/필드(속성), 행/레코드(튜플)

## SQL

### DDL
- 테이블의 구조, 즉 스키마를 정의하는 명령어
- DDL명령어의 경우 Oracle에서는 commit가 자동으로 수행되며 트랜잭션이 완료 되어 롤백이 불가능
- SQL Server에서는 자동 커밋 모드를 끄거나 명시적 트랜잭션을 선언한 경우 커밋이 자동으로 수행되지 않아 롤백이 가능

- **CREATE, ALTER, DROP, RENAME, TRUNCATE**

### DML(데이터 조작 언어)
- 데이터 관리 언어라고도 함
- 테이블에서 데이터를 조회, 입력, 수정, 삭제하는 명령어
- 롤백은 커밋 이전에만 가능!!
- 저장하면 롤백 불가능

- **SELECT, INSERT, UPDATE, DELETE, MERGE**

### DCL (데이터 제어 언어)
- 사용자  접근 권환과 같이 보안과 제어를 다루는 명령어이다

- **GRANT, REVOKE**

### TCL(트랜잭션 제어 언어)
- 트랜잭션에 대한 제어를 다루는 명령어
- DCL의 일부로 보기도 한다

- **COMMIT, ROLLBACK, SEVEPOINT**

속성(Attribute)의 개념
엔터티에 대한 자세하고 구체적인 정보를 나타낸 것으로 엔터티의 하위요소
속성은 엔터티를 나타내는 특징 중에서 업무와 관계되어 필요한 것들로 정의
속성은 의미상으로 더 이상 분리되지 않는 최소 데이터 단위
속성의 개수는 제한이 없으나 업무 프로세스에 꼭 필요한 것인지 따져보고 필수
인 것들로 최소화해야 함
속성 값
속성은 자신이 가질 수 있는 속성값들의 집합이라고 할 수 있음
하나의 엔터티 인스턴스에서 각각의 속성은 한 개의 속성값만을 가져야 함
속성 값은 단일 정보만을 담는 것이 좋음
엔터티, 인스턴스, 속성값
한 개의 엔터티는 두 개 이상의 인스턴스를 가진다(엔터티는 인스턴스의 집합)
한 개의 엔터티는 두 개 이상의 속성을 가짐
한 개의 속성은 한 개의 속성값만을 가짐
속성의 분류
속성의 특성에 따른 분류
기본 속성 : 엔터티가 본래부터 가지고 있어야 하는 속성
설계 속성 : 설계시 필요하다고 판단되어 도출된 속성
속성의 구성방식에 따른 분류
PK 속성 : 해당 엔터티의 인스턴스를 유일하게 식별할 수 있는 속성
FK 속성 : 관계를 통해서 다른 엔터티의 속성을 가져와 포함시킨 속성
일반 속성 : PK or FK가 아닌 나머지 일반 속성
도메인
속성이 가질 수 있는 값의 범위(값의 데이터 타입과 크기)를 정의한것
도메인은 데이터 타입, 크기, 제약사항(Null값의 허용 유무)등을 묶어 별도의 이름을 붙여 정의하며 정의된 도메인을 각각의 속성에 지정할 수 있다.
관계의 개념
연관관계 = 존재적 관계 : 존재자체로 연관성을 가짐
ex) 네이버의 홈화면을 보면 누가 들어가던 다 똑같은 화면을 보는 것
의존관계 = 행위적 관계: 특정 행위를 할때만 연관성을 가짐
ex) 네이버에 들어가서 로그인을 하면 사람마다 각각 다른 화면을 보는것 (로그인이라는 행위를 했기 때문에 의존관계라고 볼 수 있다)
관계의 표기법
관계명 : 관계의 이름을 나타낸다
관계차수 : 1:1, 1:M, M:N과 같이 관계를 맺는 엔터티의 인스턴스 차수를 나타낸다.
관계 선택사항
Null의 가능 여부를 의미
필수적 관계인 경우: null값을 가질 수 없음
선택적 관계인 경우: null값을 가질 수 있음
식별자의 개념
일반적으로 사람을 신분증으로 구분하는 것 처럼 엔터티 인스턴스 역시 유일하게 구별할 수 있는 속성이 있어야 하며, 이런 속성을 식별자라고 부름
식별자는 해당 엔터티의 인스턴스(객체) 대표 속성이라고 할 수 있음
주식별자
주식별자는 해당 엔터티 인스턴스를 유일하게 구분해주는 식별자로서 PK에 해당하는 속성을 말함
주식별자는 '유일성','최소성', '불변성', '존재성'을 만족해야 함
보조식별자
보조 식별자를 AK(Alternate Key)라고도 한다.
해당 엔터티를 유일하게 구별할 수 있는 식별자이기는하나 '대표성'을 가지지 못하며 다른 엔터티와 참조관계를 연결할 수 없는 식별자이다.
PK와 AK 모두 후보키에 속한다.
후보키의 조건인 유일성과 최소성을 만족하기 때문

내부 식별자
엔터티 내부에서 스스로 만들어지는 식별자
외부 식별자
관계를 통해서 다른 엔터티로부터 받아오는 식별자이다 (Foreign Key)라고도한다
단일 식별자
식별자를 구성하는 속성이 하나인 식별자
복합 식별자
식별자를 구성하는 속성이 둘 이상인 식별자
본질 식별자
업무에 존재하는 본질적인 식별자
인조 식별자
업무에 존재하지는 않으나 원래식별자가 너무 복잡하게 구성되어 있어 인위적으로 만든 식별자. 대리 식별자라고도 부름.
식별자의 관계
엔터티간의 강한 연결 관계를 표현
부모 엔터티의 식별자가 자식 엔터티의 주 식별자 구성에 포함되며 ERD로 그릴 때 실선으로 표현
부모와 자식 엔터티 인스턴스가 같은 생명주기를 가질때, 부모가 소멸하면 자식도 소멸하는 경우 식별자 관게 표현이 적합
비 식별자의 관계
엔터티간의 약한 연결 관계를 표련
ERD로 그릴때는 점선으로 표현
부모와 자식 엔터티가 서로 다른 생명주기를 가질때는 비실별자 관계과 더 적합
자식의 엔터티를 부모 엔터티와 별도로 생성하거나 부모 엔터티의 인스턴스에 참조 값이 없어도 자식 엔터티의 인스턴스가 생성될 수 있는 경우에는 비식별자 관계를 고려해야 함
여러개의 엔터티를 하나의 엔터티로 통합할 때 비식별자 관계를 우선적으로 고려하는 것이 좋다
- 

